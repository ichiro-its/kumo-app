{"version":3,"sources":["../../src/components/BoxedCircularProgress.tsx","../../src/components/LoggerProvider.tsx","../../src/components/TitledCard.tsx","../../src/hooks/useLogger.ts","../../src/hooks/useStateOnce.ts","../../src/hooks/useSession.ts","../../src/hooks/node/useNode.ts","../../src/hooks/useHandleProcess.ts","../../src/hooks/useStoreState.ts","../../src/components/SessionProvider.tsx","components/SimpleClientNode.jsx","../../src/hooks/node/useClient.ts","components/SimplePublisherNode.jsx","../../src/hooks/node/usePublisher.ts","components/SimpleServiceNode.jsx","../../src/hooks/node/useService.ts","components/SimpleSubscriptionNode.jsx","../../src/hooks/node/useSubscription.ts","App.jsx","index.jsx"],"names":["BoxedCircularProgress","display","minHeight","height","alignItems","justifyContent","React","LoggerProvider","children","maxSnack","useStyles","makeStyles","theme","useTheme","headerRoot","backgroundColor","main","headerTitle","color","white","TitledCard","props","title","raised","disablePadding","classes","root","style","padding","undefined","useLogger","snackbar","useSnackbar","success","variant","info","debug","warn","error","useStateOnce","useState","state","setState","once","setOnce","useEffect","result","callback","SessionContext","createContext","useNode","nodeName","logger","session","useContext","err","useHandleProcess","processing","setProcessing","delay","process","setTimeout","useStoreState","Store","SessionProvider","setSession","connecting","setConnecting","webSocketUrl","setWebSocketUrl","autoConnect","setAutoConnect","bridge","reason","validateWebSocketUrl","maxWidth","paddingTop","container","spacing","item","xs","label","value","onChange","event","helperText","disabled","fullWidth","onClick","size","SimpleClientNode","client","node","useClient","randomInteger","Math","floor","random","a","setA","b","setB","setResult","call","then","response","sum","catch","message","calling","handleCall","handleAChange","ev","newA","parseInt","target","Number","isNaN","handleBChange","newB","Content","Grid","TextField","type","Button","CircularProgress","SimplePublisherNode","publisher","usePublisher","data","setData","publish","strings","split","counter","length","push","String","join","incrementData","publishing","handlePublish","handleDataChange","SimpleServiceNode","requests","setRequests","service","useService","request","prevRequests","newRequests","slice","unshift","id","uuid","RequestList","Box","Typography","requestItems","map","ListItem","button","divider","ListItemText","primary","List","overflow","SimpleSubscriptionNode","messages","setMessages","subscription","useSubscription","prevMessages","newMessages","MessageList","messageItems","App","margin","Container","md","sm","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7967505f.chunk.js","sourcesContent":["import { Box, CircularProgress } from \"@material-ui/core\";\nimport React, { FunctionComponent } from \"react\";\n\nconst BoxedCircularProgress: FunctionComponent = () => {\n  return (\n    <Box\n      display=\"flex\"\n      minHeight={100}\n      height=\"100%\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <CircularProgress />\n    </Box>\n  );\n};\n\nexport default BoxedCircularProgress;\n","import { SnackbarProvider } from \"notistack\";\nimport React, { FunctionComponent, ReactNode, ReactNodeArray } from \"react\";\n\ninterface Props {\n  children: ReactNode | ReactNodeArray;\n}\n\nconst LoggerProvider: FunctionComponent<Props> = ({ children }: Props) => {\n  return <SnackbarProvider maxSnack={3}>{children}</SnackbarProvider>;\n};\n\nexport default LoggerProvider;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  makeStyles,\n  useTheme,\n} from \"@material-ui/core\";\n\nimport React, { FunctionComponent, ReactNode, ReactNodeArray } from \"react\";\n\nconst useStyles = makeStyles(() => {\n  const theme = useTheme();\n\n  return {\n    headerRoot: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    headerTitle: {\n      color: theme.palette.common.white,\n    },\n  };\n});\n\ninterface Props {\n  children: ReactNode | ReactNodeArray;\n  title: string;\n  raised?: boolean;\n  disablePadding?: boolean;\n}\n\nconst TitledCard: FunctionComponent<Props> = (props: Props) => {\n  const { children, title, raised, disablePadding } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card raised={raised}>\n      <CardHeader\n        title={title}\n        classes={{\n          root: classes.headerRoot,\n          title: classes.headerTitle,\n        }}\n      />\n      <CardContent style={{ padding: disablePadding ? 0 : undefined }}>\n        {children}\n      </CardContent>\n    </Card>\n  );\n};\n\nTitledCard.defaultProps = {\n  raised: false,\n  disablePadding: false,\n};\n\nexport default TitledCard;\n","import { useSnackbar } from \"notistack\";\n\ninterface Logger {\n  success: (message: string) => void;\n  info: (message: string) => void;\n  debug: (message: string) => void;\n  warn: (message: string) => void;\n  error: (message: string) => void;\n}\n\nfunction useLogger(): Logger {\n  const snackbar = useSnackbar();\n\n  return {\n    success: (message: string) => {\n      if (snackbar) {\n        snackbar.enqueueSnackbar(message, { variant: \"success\" });\n      }\n    },\n    info: (message: string) => {\n      if (snackbar) {\n        snackbar.enqueueSnackbar(message, { variant: \"info\" });\n      }\n    },\n    debug: (message: string) => {\n      if (snackbar) {\n        snackbar.enqueueSnackbar(message);\n      }\n    },\n    warn: (message: string) => {\n      if (snackbar) {\n        snackbar.enqueueSnackbar(message, { variant: \"warning\" });\n      }\n    },\n    error: (message: string) => {\n      if (snackbar) {\n        snackbar.enqueueSnackbar(message, { variant: \"error\" });\n      }\n    },\n  };\n}\n\nexport default useLogger;\n","import { useState, useEffect } from \"react\";\n\ntype StateOnceCallback<T> = () => T | Promise<T | void> | null;\n\nfunction useStateOnce<T>(callback: StateOnceCallback<T>): T | null {\n  const [state, setState] = useState<T | null>(null);\n  const [once, setOnce] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (state === null && !once) {\n      const result = callback();\n\n      if (result !== null) {\n        setOnce(true);\n        if (result instanceof Promise) {\n          result.then((newResult) => {\n            if (newResult) {\n              setState(newResult);\n            } else {\n              setOnce(false);\n            }\n          });\n        } else {\n          setState(result);\n        }\n      }\n    }\n  });\n\n  return state;\n}\n\nexport default useStateOnce;\n","import { createContext, useContext } from \"react\";\nimport { SessionHandler } from \"kumo-client\";\n\nconst SessionContext = createContext<SessionHandler | null>(null);\n\nfunction useSession(): SessionHandler | null {\n  return useContext(SessionContext);\n}\n\nexport { SessionContext, useSession };\n","import { NodeHandler } from \"kumo-client\";\n\nimport useLogger from \"../useLogger\";\nimport { useSession } from \"../useSession\";\nimport useStateOnce from \"../useStateOnce\";\n\nfunction useNode(nodeName: string): NodeHandler | null {\n  const logger = useLogger();\n  const session = useSession();\n\n  return useStateOnce(() => {\n    if (session === null) {\n      return null;\n    }\n\n    return session.createNode(nodeName).catch((err: Error) => {\n      logger.error(`Failed to create a Node! ${err.message}.`);\n    });\n  });\n}\n\nexport default useNode;\n","import { useState } from \"react\";\n\nfunction useHandleProcess(\n  process: () => void | Promise<void>,\n  delay: number\n): [boolean, () => void] {\n  const [processing, setProcessing] = useState<boolean>(false);\n\n  const handleProcess = () => {\n    if (delay === undefined) {\n      const result = process();\n      if (result instanceof Promise) {\n        setProcessing(true);\n        result.finally(() => {\n          setProcessing(false);\n        });\n      }\n    } else {\n      setProcessing(true);\n      setTimeout(async () => {\n        await process();\n        setProcessing(false);\n      }, delay);\n    }\n  };\n\n  return [processing, handleProcess];\n}\n\nexport default useHandleProcess;\n","import { useState } from \"react\";\nimport Store from \"store2\";\n\ntype StoreStateDispatch<T> = (newState: T) => void;\n\nfunction useStoreState<T>(\n  key: string,\n  initialValue: T\n): [T, StoreStateDispatch<T>] {\n  const [state, setState] = useState(Store.get(key, initialValue));\n\n  return [\n    state,\n    (newState: T) => {\n      setState(newState);\n      Store.set(key, newState);\n    },\n  ];\n}\n\nexport default useStoreState;\n","import {\n  Box,\n  Button,\n  CircularProgress,\n  Container,\n  Grid,\n  TextField,\n} from \"@material-ui/core\";\n\nimport { Bridge, SessionHandler } from \"kumo-client\";\n\nimport React, {\n  ChangeEvent,\n  FunctionComponent,\n  ReactNode,\n  ReactNodeArray,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport TitledCard from \"./TitledCard\";\n\nimport {\n  SessionContext,\n  useLogger,\n  useStateOnce,\n  useStoreState,\n} from \"../hooks\";\n\ninterface Props {\n  children: ReactNode | ReactNodeArray;\n}\n\nconst SessionProvider: FunctionComponent<Props> = ({ children }: Props) => {\n  const logger = useLogger();\n\n  const [session, setSession] = useState<SessionHandler | null>(null);\n  const [connecting, setConnecting] = useState(false);\n\n  const [webSocketUrl, setWebSocketUrl] = useStoreState(\n    \"webSocketUrl\",\n    \"ws://localhost:8080\"\n  );\n\n  const [autoConnect, setAutoConnect] = useStoreState(\"autoConnect\", false);\n\n  const bridge = useStateOnce(() => {\n    return new Bridge()\n      .onConnect((newSession) => {\n        logger.success(`Connected to the bridge server on ${webSocketUrl}!`);\n\n        setSession(newSession);\n        setConnecting(false);\n        setAutoConnect(true);\n      })\n      .onDisconnect((code, reason) => {\n        logger.error(\n          \"Disconnected from the bridge server! \" +\n            `${reason || \"no reason\"} (${code}).`\n        );\n\n        setSession(null);\n        setConnecting(false);\n        setAutoConnect(false);\n      })\n      .onError((err) => {\n        logger.error(`Found error! ${err.message}.`);\n      });\n  });\n\n  useEffect(() => {\n    if (bridge !== null && session === null && autoConnect && !connecting) {\n      setConnecting(true);\n      bridge.connect(webSocketUrl);\n    }\n  });\n\n  const handleConnect = () => {\n    setConnecting(true);\n    setTimeout(() => {\n      bridge?.connect(webSocketUrl);\n    }, 500);\n  };\n\n  const validateWebSocketUrl = () => {\n    return webSocketUrl.startsWith(\"ws://\") && webSocketUrl.length > 5;\n  };\n\n  const onWebSocketUrlChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setWebSocketUrl(event.target.value);\n    setAutoConnect(false);\n  };\n\n  if (session === null) {\n    if (autoConnect) {\n      return null;\n    }\n\n    return (\n      <Container maxWidth=\"xs\">\n        <Box paddingTop={8}>\n          <TitledCard title=\"Create a New Session\" raised>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"WebSocket URL\"\n                  value={webSocketUrl}\n                  onChange={onWebSocketUrlChange}\n                  error={!validateWebSocketUrl()}\n                  helperText={\n                    validateWebSocketUrl() ? null : \"Invalid WebSocket URL!\"\n                  }\n                  disabled={connecting}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  onClick={handleConnect}\n                  disabled={!validateWebSocketUrl() || connecting}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  fullWidth\n                >\n                  {connecting ? <CircularProgress size={24} /> : \"Connect\"}\n                </Button>\n              </Grid>\n            </Grid>\n          </TitledCard>\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <SessionContext.Provider value={session}>\n      {children}\n    </SessionContext.Provider>\n  );\n};\n\nexport default SessionProvider;\n","import { Button, CircularProgress, Grid, TextField } from \"@material-ui/core\";\n\nimport {\n  BoxedCircularProgress,\n  TitledCard,\n  useNode,\n  useClient,\n  useHandleProcess,\n  useLogger,\n} from \"kumo-app\";\n\nimport React, { useState } from \"react\";\n\nfunction SimpleClientNode() {\n  const logger = useLogger();\n  const node = useNode(\"simple_client\");\n\n  const client = useClient(\n    node,\n    \"example_interfaces/srv/AddTwoInts\",\n    \"/add_two_ints\"\n  );\n\n  const randomInteger = () => {\n    return Math.floor(Math.random() * 10);\n  };\n\n  const [a, setA] = useState(randomInteger);\n  const [b, setB] = useState(randomInteger);\n  const [result, setResult] = useState(\"\");\n\n  const [calling, handleCall] = useHandleProcess(() => {\n    return client\n      .call({ a, b })\n      .then((response) => {\n        setA(randomInteger());\n        setB(randomInteger());\n        setResult(`${a} + ${b} = ${response.sum}`);\n      })\n      .catch((err) => {\n        logger.error(`Failed to call data! ${err.message}.`);\n      });\n  }, 500);\n\n  const handleAChange = (ev) => {\n    const newA = parseInt(ev.target.value, 10);\n    setA(Number.isNaN(newA) ? a : newA);\n  };\n\n  const handleBChange = (ev) => {\n    const newB = parseInt(ev.target.value, 10);\n    setB(Number.isNaN(newB) ? b : newB);\n  };\n\n  const Content = () => {\n    if (client === null) {\n      return <BoxedCircularProgress />;\n    }\n\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={3}>\n          <TextField\n            label=\"A\"\n            value={a}\n            onChange={handleAChange}\n            disabled={client === null || calling}\n            variant=\"outlined\"\n            type=\"number\"\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <TextField\n            label=\"B\"\n            value={b}\n            onChange={handleBChange}\n            disabled={client === null || calling}\n            variant=\"outlined\"\n            type=\"number\"\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            label=\"Result\"\n            value={result}\n            variant=\"outlined\"\n            fullWidth\n            disabled\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            onClick={handleCall}\n            disabled={client === null || calling}\n            color=\"primary\"\n            variant=\"contained\"\n            fullWidth\n          >\n            {calling ? <CircularProgress size={24} /> : \"Call\"}\n          </Button>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return (\n    <TitledCard title=\"Simple Client Node\" raised>\n      <Content />\n    </TitledCard>\n  );\n}\n\nexport default SimpleClientNode;\n","import { ClientHandler, NodeHandler } from \"kumo-client\";\n\nimport useLogger from \"../useLogger\";\nimport useStateOnce from \"../useStateOnce\";\n\nfunction useClient(\n  node: NodeHandler | null,\n  serviceType: string,\n  serviceName: string\n): ClientHandler | null {\n  const logger = useLogger();\n\n  return useStateOnce<ClientHandler>(() => {\n    if (node === null) {\n      return null;\n    }\n\n    return node.createClient(serviceType, serviceName).catch((err: Error) => {\n      logger.error(`Failed to create a new Client! ${err.message}.`);\n    });\n  });\n}\n\nexport default useClient;\n","import { Button, CircularProgress, Grid, TextField } from \"@material-ui/core\";\n\nimport {\n  BoxedCircularProgress,\n  TitledCard,\n  useHandleProcess,\n  useLogger,\n  useNode,\n  usePublisher,\n} from \"kumo-app\";\n\nimport React, { useState } from \"react\";\n\nfunction SimplePublisherNode() {\n  const logger = useLogger();\n  const node = useNode(\"simple_publisher\");\n  const publisher = usePublisher(node, \"std_msgs/msg/String\", \"/topic\");\n\n  const [data, setData] = useState(\"Hello World! 0\");\n\n  const incrementData = () => {\n    const strings = data.split(\" \");\n    const counter = parseInt(strings[strings.length - 1], 10);\n    if (Number.isNaN(counter)) {\n      strings.push(\"0\");\n    } else {\n      strings[strings.length - 1] = String(counter + 1);\n    }\n\n    setData(strings.join(\" \"));\n  };\n\n  const [publishing, handlePublish] = useHandleProcess(() => {\n    return publisher\n      .publish({ data })\n      .then(() => {\n        incrementData();\n      })\n      .catch((err) => {\n        logger.error(`Failed to publish data! ${err.message}.`);\n      });\n  }, 500);\n\n  const handleDataChange = (ev) => {\n    setData(ev.target.value);\n  };\n\n  const Content = () => {\n    if (publisher === null) {\n      return <BoxedCircularProgress />;\n    }\n\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            label=\"Data\"\n            value={data}\n            onChange={handleDataChange}\n            disabled={publisher === null || publishing}\n            variant=\"outlined\"\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            onClick={handlePublish}\n            disabled={publisher === null || publishing}\n            color=\"primary\"\n            variant=\"contained\"\n            fullWidth\n          >\n            {publishing ? <CircularProgress size={24} /> : \"Publish\"}\n          </Button>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return (\n    <TitledCard title=\"Simple Publisher Node\" raised>\n      <Content />\n    </TitledCard>\n  );\n}\n\nexport default SimplePublisherNode;\n","import { NodeHandler, PublisherHandler } from \"kumo-client\";\n\nimport useLogger from \"../useLogger\";\nimport useStateOnce from \"../useStateOnce\";\n\nfunction usePublisher(\n  node: NodeHandler,\n  messageType: string,\n  topicName: string\n): PublisherHandler | null {\n  const logger = useLogger();\n\n  return useStateOnce(() => {\n    if (node === null) {\n      return null;\n    }\n\n    return node.createPublisher(messageType, topicName).catch((err: Error) => {\n      logger.error(`Failed to create a new Publisher! ${err.message}.`);\n    });\n  });\n}\n\nexport default usePublisher;\n","import {\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\n\nimport {\n  BoxedCircularProgress,\n  TitledCard,\n  useNode,\n  useService,\n} from \"kumo-app\";\n\nimport React, { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nfunction SimpleServiceNode() {\n  const node = useNode(\"simple_service\");\n\n  const [requests, setRequests] = useState([]);\n\n  const service = useService(\n    node,\n    \"example_interfaces/srv/AddTwoInts\",\n    \"/add_two_ints\",\n    (request) => {\n      const sum = request.a + request.b;\n\n      setRequests((prevRequests) => {\n        const newRequests = prevRequests.slice();\n        newRequests.unshift({\n          id: uuid(),\n          a: request.a,\n          b: request.b,\n          sum,\n        });\n\n        return newRequests;\n      });\n\n      return { sum };\n    }\n  );\n\n  const Content = () => {\n    if (service === null) {\n      return <BoxedCircularProgress />;\n    }\n\n    const RequestList = () => {\n      if (requests.length <= 0) {\n        return (\n          <Box\n            display=\"flex\"\n            height=\"100%\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Typography>No data</Typography>\n          </Box>\n        );\n      }\n\n      const requestItems = requests.map((request) => {\n        return (\n          <ListItem key={request.id} button divider>\n            <ListItemText\n              primary={`${request.a} + ${request.b} = ${request.sum}`}\n            />\n          </ListItem>\n        );\n      });\n\n      return <List disablePadding>{requestItems}</List>;\n    };\n\n    return (\n      <Box height={200} overflow=\"auto\">\n        <RequestList />\n      </Box>\n    );\n  };\n\n  return (\n    <TitledCard title=\"Simple Service Node\" raised disablePadding>\n      <Content />\n    </TitledCard>\n  );\n}\n\nexport default SimpleServiceNode;\n","import {\n  AsyncServiceCallback,\n  NodeHandler,\n  ServiceCallback,\n  ServiceHandler,\n} from \"kumo-client\";\n\nimport useLogger from \"../useLogger\";\nimport useStateOnce from \"../useStateOnce\";\n\nfunction useService(\n  node: NodeHandler,\n  serviceType: string,\n  serviceName: string,\n  callback: ServiceCallback | AsyncServiceCallback\n): ServiceHandler | null {\n  const logger = useLogger();\n\n  return useStateOnce(() => {\n    if (node === null) {\n      return null;\n    }\n\n    return node\n      .createService(serviceType, serviceName, callback)\n      .catch((err: Error) => {\n        logger.error(`Failed to create a new Service! ${err.message}.`);\n      });\n  });\n}\n\nexport default useService;\n","import {\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\n\nimport {\n  BoxedCircularProgress,\n  TitledCard,\n  useNode,\n  useSubscription,\n} from \"kumo-app\";\n\nimport React, { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nfunction SimpleSubscriptionNode() {\n  const node = useNode(\"simple_subscription\");\n\n  const [messages, setMessages] = useState([]);\n\n  const subscription = useSubscription(\n    node,\n    \"std_msgs/msg/String\",\n    \"/topic\",\n    (message) => {\n      setMessages((prevMessages) => {\n        const newMessages = prevMessages.slice();\n        newMessages.unshift({\n          id: uuid(),\n          data: message.data,\n        });\n\n        return newMessages;\n      });\n    }\n  );\n\n  const Content = () => {\n    if (subscription === null) {\n      return <BoxedCircularProgress />;\n    }\n\n    const MessageList = () => {\n      if (messages.length <= 0) {\n        return (\n          <Box\n            display=\"flex\"\n            height=\"100%\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Typography>No data</Typography>\n          </Box>\n        );\n      }\n\n      const messageItems = messages.map((message) => {\n        return (\n          <ListItem key={message.id} button divider>\n            <ListItemText primary={message.data} />\n          </ListItem>\n        );\n      });\n\n      return <List disablePadding>{messageItems}</List>;\n    };\n\n    return (\n      <Box height={200} overflow=\"auto\">\n        <MessageList />\n      </Box>\n    );\n  };\n\n  return (\n    <TitledCard title=\"Simple Subscription Node\" raised disablePadding>\n      <Content />\n    </TitledCard>\n  );\n}\n\nexport default SimpleSubscriptionNode;\n","import {\n  AsyncSubscriptionCallback,\n  NodeHandler,\n  SubscriptionCallback,\n  SubscriptionHandler,\n} from \"kumo-client\";\n\nimport useLogger from \"../useLogger\";\nimport useStateOnce from \"../useStateOnce\";\n\nfunction useSubscription(\n  node: NodeHandler,\n  messageType: string,\n  topicName: string,\n  callback: SubscriptionCallback | AsyncSubscriptionCallback\n): SubscriptionHandler | null {\n  const logger = useLogger();\n\n  return useStateOnce(() => {\n    if (node === null) {\n      return null;\n    }\n\n    return node\n      .createSubscription(messageType, topicName, callback)\n      .catch((err: Error) => {\n        logger.error(`Failed to create a new Subscription! ${err.message}.`);\n      });\n  });\n}\n\nexport default useSubscription;\n","import { Box, Container, Grid } from \"@material-ui/core\";\nimport { LoggerProvider, SessionProvider } from \"kumo-app\";\nimport React from \"react\";\n\nimport {\n  SimpleClientNode,\n  SimplePublisherNode,\n  SimpleServiceNode,\n  SimpleSubscriptionNode,\n} from \"./components\";\n\nfunction App() {\n  return (\n    <LoggerProvider>\n      <SessionProvider>\n        <Box margin={4}>\n          <Container maxWidth=\"md\">\n            <Grid container spacing={4}>\n              <Grid item md={6} sm={12}>\n                <Grid container spacing={4}>\n                  <Grid item xs={12}>\n                    <SimplePublisherNode />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <SimpleSubscriptionNode />\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item md={6} sm={12}>\n                <Grid container spacing={4}>\n                  <Grid item xs={12}>\n                    <SimpleClientNode />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <SimpleServiceNode />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Container>\n        </Box>\n      </SessionProvider>\n    </LoggerProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}